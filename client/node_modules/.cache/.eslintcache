[{"C:\\Users\\moran\\Documents\\GitHub\\Final-task-client-server-course-car-service-info\\client\\src\\index.js":"1","C:\\Users\\moran\\Documents\\GitHub\\Final-task-client-server-course-car-service-info\\client\\src\\App.js":"2","C:\\Users\\moran\\Documents\\GitHub\\Final-task-client-server-course-car-service-info\\client\\src\\reportWebVitals.js":"3","C:\\Users\\moran\\Documents\\GitHub\\Final-task-client-server-course-car-service-info\\client\\src\\components\\Home\\Home.jsx":"4","C:\\Users\\moran\\Documents\\GitHub\\Final-task-client-server-course-car-service-info\\client\\src\\components\\LogIn\\LogIn.jsx":"5","C:\\Users\\moran\\Documents\\GitHub\\Final-task-client-server-course-car-service-info\\client\\src\\components\\SignUp\\SignUp.jsx":"6","C:\\Users\\moran\\Documents\\GitHub\\Final-task-client-server-course-car-service-info\\client\\src\\components\\ResetPassword\\ResetPassword.jsx":"7","C:\\Users\\moran\\Documents\\GitHub\\Final-task-client-server-course-car-service-info\\client\\src\\components\\Page404\\Page404.jsx":"8","C:\\Users\\moran\\Documents\\GitHub\\Final-task-client-server-course-car-service-info\\client\\src\\components\\AddNewCarService\\AddNewCarService.jsx":"9","C:\\Users\\moran\\Documents\\GitHub\\Final-task-client-server-course-car-service-info\\client\\src\\components\\ForgotPassword\\ForgotPassword.jsx":"10","C:\\Users\\moran\\Documents\\GitHub\\Final-task-client-server-course-car-service-info\\client\\src\\components\\AboutUs\\AboutUs.jsx":"11","C:\\Users\\moran\\Documents\\GitHub\\Final-task-client-server-course-car-service-info\\client\\src\\components\\Dashboard\\Dashboard.jsx":"12","C:\\Users\\moran\\Documents\\GitHub\\Final-task-client-server-course-car-service-info\\client\\src\\components\\EditCarService\\EditCarService.jsx":"13","C:\\Users\\moran\\Documents\\GitHub\\Final-task-client-server-course-car-service-info\\client\\src\\components\\ReactTable\\ReactTable.jsx":"14","C:\\Users\\moran\\Documents\\GitHub\\Final-task-client-server-course-car-service-info\\client\\src\\Validations\\FormsValidation.js":"15","C:\\Users\\moran\\Documents\\GitHub\\Final-task-client-server-course-car-service-info\\client\\src\\components\\ReactTable\\GlobalFilter.js":"16"},{"size":338,"mtime":1674824334172,"results":"17","hashOfConfig":"18"},{"size":1866,"mtime":1674824334132,"results":"19","hashOfConfig":"18"},{"size":375,"mtime":1674824334177,"results":"20","hashOfConfig":"18"},{"size":1612,"mtime":1674824334142,"results":"21","hashOfConfig":"18"},{"size":10083,"mtime":1674836832193,"results":"22","hashOfConfig":"18"},{"size":9117,"mtime":1674836851664,"results":"23","hashOfConfig":"18"},{"size":6525,"mtime":1674836846164,"results":"24","hashOfConfig":"18"},{"size":1086,"mtime":1674824334142,"results":"25","hashOfConfig":"18"},{"size":7374,"mtime":1674836801809,"results":"26","hashOfConfig":"18"},{"size":6368,"mtime":1674836822003,"results":"27","hashOfConfig":"18"},{"size":1609,"mtime":1674850584408,"results":"28","hashOfConfig":"18"},{"size":8941,"mtime":1674846516901,"results":"29","hashOfConfig":"18"},{"size":8042,"mtime":1674836813873,"results":"30","hashOfConfig":"18"},{"size":3850,"mtime":1674824334147,"results":"31","hashOfConfig":"18"},{"size":3560,"mtime":1674824334137,"results":"32","hashOfConfig":"18"},{"size":415,"mtime":1674824334147,"results":"33","hashOfConfig":"18"},{"filePath":"34","messages":"35","suppressedMessages":"36","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"19w72d5",{"filePath":"37","messages":"38","suppressedMessages":"39","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"40","messages":"41","suppressedMessages":"42","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"43","messages":"44","suppressedMessages":"45","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"46","messages":"47","suppressedMessages":"48","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"49"},{"filePath":"50","messages":"51","suppressedMessages":"52","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"53"},{"filePath":"54","messages":"55","suppressedMessages":"56","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"57"},{"filePath":"58","messages":"59","suppressedMessages":"60","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"61","messages":"62","suppressedMessages":"63","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"64","messages":"65","suppressedMessages":"66","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"67"},{"filePath":"68","messages":"69","suppressedMessages":"70","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"71","messages":"72","suppressedMessages":"73","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"74"},{"filePath":"75","messages":"76","suppressedMessages":"77","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"78","messages":"79","suppressedMessages":"80","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"81"},{"filePath":"82","messages":"83","suppressedMessages":"84","errorCount":0,"fatalErrorCount":0,"warningCount":30,"fixableErrorCount":0,"fixableWarningCount":0,"source":"85"},{"filePath":"86","messages":"87","suppressedMessages":"88","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\moran\\Documents\\GitHub\\Final-task-client-server-course-car-service-info\\client\\src\\index.js",[],[],"C:\\Users\\moran\\Documents\\GitHub\\Final-task-client-server-course-car-service-info\\client\\src\\App.js",[],[],"C:\\Users\\moran\\Documents\\GitHub\\Final-task-client-server-course-car-service-info\\client\\src\\reportWebVitals.js",[],[],"C:\\Users\\moran\\Documents\\GitHub\\Final-task-client-server-course-car-service-info\\client\\src\\components\\Home\\Home.jsx",[],[],"C:\\Users\\moran\\Documents\\GitHub\\Final-task-client-server-course-car-service-info\\client\\src\\components\\LogIn\\LogIn.jsx",["89","90","91"],[],"import React, { useRef, useState, useEffect } from 'react';\r\nimport { logInSchema } from 'Validations/FormsValidation';\r\nimport { yupResolver } from '@hookform/resolvers/yup';\r\nimport { useForm } from 'react-hook-form';\r\nimport { useNavigate  } from 'react-router-dom';\r\nimport { Modal, Button } from \"react-bootstrap\";\r\nimport md5 from 'md5';\r\nimport ReCAPTCHA from 'react-google-recaptcha';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport './LogIn.css';\r\n\r\n/* LogIn Component */\r\nconst LogIn = () => {\r\n    const navigate = useNavigate(); /* define hook to navigate to other pages */\r\n    const [rememberMe, setRememberMe] = useState(0);/* define state for the remember me checkbox */\r\n    const [showModal, setShow] = useState(false);/*define state for the modal box */\r\n    const [msgModal, setMsgModal] = useState('');/*define state for the message modal box */\r\n    const captchaRef = useRef(null); /* define ref for the captcha */\r\n\r\n\r\n    useEffect(() => {\r\n        /* check for a stored session in local storage */\r\n        const storedSession = localStorage.getItem('session');\r\n        if (storedSession) {\r\n            /* if the session is stored, fill in the username and password */\r\n            const session = JSON.parse(storedSession);\r\n            if(session.rememberMe)\r\n            {\r\n                navigate('/dashboard'); /* navigate to the dashboard */\r\n            }\r\n        }\r\n      }, []); // Only run this effect once\r\n      \r\n\t/* function that close the modal and reset the message modal*/\r\n    const handleClose = () =>{\r\n         setShow(false);\r\n         setMsgModal('');\r\n    }\r\n\t/* function that open the modal and displays it*/\r\n    const handleShow = () =>{\r\n\t\tsetShow(true);\r\n\t}\r\n\t\r\n    /* function that navigates to the forgot password page */\r\n    const handleClickForgotPassword = () => {\r\n        navigate('/forgotPassword');\r\n    };\r\n\r\n    /* function that navigates to the sign up page */\r\n    const handleClickSignUp = () => {\r\n        navigate('/signUp');\r\n    };\r\n\r\n\r\n    /* function that navigates to the dashboard page */\r\n    const handleClickDashboard = () => {\r\n        navigate('/dashboard');\r\n    };\r\n    \r\n    /* define useForm for the logIn form */\r\n    const { register, handleSubmit, formState: { errors }} = useForm({\r\n        resolver: yupResolver(logInSchema), /* validate the form with the schema */\r\n        mode: \"onChange\" /* validate the form on change */\r\n    });\r\n\r\n    /* function that submit the form */\r\n    const submitForm = async (data, e) => {\r\n\r\n        /* retrieve the session from the local storage*/\r\n\t\tconst storedSession = localStorage.getItem('session');\r\n        e.preventDefault();\r\n        if (storedSession){ /* if the session is stored, navigate to the dashboard */\r\n            navigate('/dashboard'); \r\n        }\r\n\r\n        /* if the session is not stored */\r\n\r\n        /* check if the recaptcha is valid */\r\n        const token = captchaRef.current.getValue();\r\n        captchaRef.current.reset();\r\n\r\n        /* define the recaptch request message */\r\n        const reCAPTCHMsg = {\r\n            method: 'POST',\r\n            headers: { 'Content-Type': 'application/json' },\r\n            body: JSON.stringify(\r\n                {\r\n                    title:     'reCAPTCHA',\r\n                    token:     token\r\n                })\r\n        };\r\n        \r\n        console.log(\"requesting\");\r\n\r\n        const reCaptchaResponse = await fetch('/reCaptchaValidation', reCAPTCHMsg) /* send the token to the server to validate it */\r\n        console.log(reCaptchaResponse);\r\n        if (!reCaptchaResponse.ok) {\r\n\t\t\t/* if the recaptcha is not valid, alert the user */\r\n           setMsgModal('ReCAPTCHA verification failed')\r\n           handleShow()\r\n\r\n            return;\r\n        }\r\n\r\n        /* define the logIn request message */\r\n        const requestMsg = {\r\n            method: 'POST',\r\n            headers: {'Content-Type': 'application/json'},\r\n            body: JSON.stringify(\r\n                {\r\n                    title: 'LogIn',\r\n                    email: data.email,\r\n                    password: md5(data.password),\r\n                })\r\n        };\r\n\r\n        console.log(\"requesting\");\r\n\r\n\r\n        const response = await fetch('/logIn', requestMsg);/* send the request to the server */\r\n        \r\n        if (!response.ok) {/* if the response is not ok, alert the user */\r\n            setMsgModal('Invalid Login Details');\r\n            handleShow();\r\n            localStorage.clear();/* Clear the local storage */\r\n\r\n            return;\r\n        }\r\n        let responseData = await response.json(); /* retrieve the response data */\r\n        responseData = JSON.parse(responseData.body); /* parse the response data */\r\n        console.log(responseData)\r\n\r\n        /* if the remember me checkbox is checked, store the session in the local storage */\r\n        if (rememberMe) {\r\n            localStorage.setItem('session', JSON.stringify({rememberMe}));\r\n        } \r\n        console.log(data);\r\n\r\n        localStorage.setItem('connected', JSON.stringify(true)); /* Set the connected state to true */\r\n        localStorage.setItem('user', JSON.stringify(responseData)); /* Set the user data in local storage */\r\n        handleClickDashboard(); /* navigate to the dashboard */\r\n    };\r\n    \r\n    return (\r\n        \r\n        <div className=\"container p-3\">\r\n\r\n            <div className=\"row justify-content-center\">\r\n                <div className=\"col-xl-10 col-lg-12 col-md-9\">\r\n                    <div className=\"card o-hidden border-0 shadow-lg my-5\">\r\n                        <div className=\"card-body p-0\">\r\n                            <div className=\"row\">\r\n                                <div className=\"col-lg-6 d-none d-lg-block bg-login-image\"></div>\r\n                                <div className=\"col-lg-6\">\r\n                                    <div className=\"p-2\">\r\n                                        <div className=\"text-center\">\r\n                                            <h1 className=\"h4 text-gray-900 mb-4\">Welcome Back!</h1>\r\n                                        </div>\r\n                                        <form className=\"user\" onSubmit={handleSubmit(submitForm)}>\r\n                                            <div className=\"form-group\">\r\n                                                <input id=\"email\" type=\"email\" className=\"form-control form-control-user\"\r\n                                                    name=\"email\" aria-describedby=\"emailHelp\"\r\n                                                    placeholder=\"Enter Email Address...\" {...register('email')}/>\r\n                                                {errors.email ? <p className='error-msg'>{errors.email?.message}</p> : <br/>} {/* display error message if the email is not valid */}\r\n                                            </div>\r\n                                            <div className=\"form-group\">\r\n                                                <input id=\"password\" type=\"password\" className=\"form-control form-control-user\"\r\n                                                    name=\"password\" placeholder=\"Password\" {...register('password')}/>\r\n                                                {errors.password ? <p className='error-msg'>{errors.password?.message}</p> : <br/>} {/* display error message if the password is not valid */}\r\n                                            </div>\r\n                                            <div className=\"form-group\">\r\n                                                <div className=\"custom-control custom-checkbox small\">\r\n                                                    <input type=\"checkbox\" className=\"custom-control-input\" id=\"customCheck\" checked={rememberMe} onChange={(event) => setRememberMe(event.target.checked)}/>\r\n                                                    <label className=\"custom-control-label remember-me-label\" htmlFor=\"customCheck\">Remember\r\n                                                        Me</label>\r\n                                                </div>\r\n                                            </div>\r\n                                            <center className='margin-bottom-ReCAPTCHA'><ReCAPTCHA /* ReCAPTCHA component */\r\n                                                sitekey={process.env.REACT_APP_RECAPTCHA_SITE_KEY}\r\n                                                ref={captchaRef}\r\n                                            /></center>\r\n                                            <input type=\"submit\" className=\"btn btn-primary btn-user btn-block\" value={'Login'}></input>\r\n                                            <hr/>\r\n                                        </form>\r\n                                        <hr/>\r\n                                        <div className=\"text-center\">\r\n                                            <a className=\"small cursor-pointer\" onClick={handleClickForgotPassword}>Forgot Password?</a>\r\n                                        </div>\r\n                                        <div className=\"text-center\">\r\n                                            <a className=\"small cursor-pointer\" onClick={handleClickSignUp}>Create an Account!</a>\r\n                                        </div>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n\r\n                </div>\r\n\r\n            </div>\r\n            <Modal show={showModal} onHide={handleClose}>\r\n                <Modal.Header closeButton>\r\n                    <Modal.Title className='msg-modal-title'>ALERT!</Modal.Title>\r\n                </Modal.Header>\r\n                <Modal.Body><p className='msg-modal'>{msgModal}</p></Modal.Body>\r\n                <Modal.Footer>\r\n                    <Button variant=\"secondary\" onClick={handleClose}>\r\n                        Close\r\n                    </Button>\r\n                    \r\n                </Modal.Footer>\r\n            </Modal>\r\n    </div>\r\n    );\r\n};\r\n\r\nexport default LogIn;","C:\\Users\\moran\\Documents\\GitHub\\Final-task-client-server-course-car-service-info\\client\\src\\components\\SignUp\\SignUp.jsx",["92"],[],"import React, { useRef,useState } from 'react';\r\nimport { useNavigate  } from 'react-router-dom';\r\nimport { signUpSchema } from 'Validations/FormsValidation';\r\nimport { yupResolver } from '@hookform/resolvers/yup';\r\nimport { useForm } from 'react-hook-form';\r\nimport { Modal, Button } from \"react-bootstrap\";\r\nimport md5 from 'md5';\r\nimport ReCAPTCHA from 'react-google-recaptcha';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport './SignUp.css';\r\nimport '../../css/sb-admin-2.css';\r\n\r\n/* SignUp Component */\r\nconst SignUp = () => {\r\n\r\n    const navigate = useNavigate(); /* define hook to navigate to other pages */\r\n    const [showModal, setShow] = useState(false);/*define state for the modal box */\r\n    const [msgModal, setMsgModal] = useState('');/*define state for the message modal box */\r\n    const captchaRef = useRef(null); /* define ref for the reCAPTCHA */\r\n    \r\n    /* function that close the modal and reset the message modal*/\r\n    const handleClose = () =>{\r\n        setShow(false);\r\n        if(msgModal === 'Registered! Please login.') {\r\n            setMsgModal('');\r\n            handleClickLogIn();\r\n        }\r\n        setMsgModal('');\r\n   }\r\n   /* function that open the modal and displays it*/\r\n   const handleShow = () =>{\r\n       setShow(true);\r\n   }\r\n\r\n    /* function that navigates to the log in page */\r\n    const handleClickLogIn = () => {\r\n        navigate('/logIn');\r\n    };\r\n    \r\n    /* define useForm for the signUp form */\r\n    const { register, handleSubmit, formState: { errors }} = useForm({\r\n        resolver: yupResolver(signUpSchema), /* validate the form with the schema */\r\n        mode: \"onChange\" /* validate the form on change */\r\n    });\r\n\r\n    /* function that submit the form and send the data to the server*/\r\n    const submitForm = async (data, e) => {\r\n        e.preventDefault();\r\n\r\n        /* get the token from the reCAPTCHA */\r\n        const token = captchaRef.current.getValue();\r\n        captchaRef.current.reset();\r\n\r\n        /* define the recaptch request message */\r\n        const reCAPTCHMsg = {\r\n            method: 'POST',\r\n            headers: { 'Content-Type': 'application/json' },\r\n            body: JSON.stringify(\r\n                {\r\n                    title:     'reCAPTCHA',\r\n                    token:     token\r\n                })\r\n        };\r\n        \r\n        console.log(\"requesting\");\r\n\r\n        const reCaptchaResponse = await fetch('/reCaptchaValidation', reCAPTCHMsg) /* send the token to the server to validate it */\r\n        console.log(reCaptchaResponse);\r\n        if (!reCaptchaResponse.ok) { /* if the recaptcha is not valid, alert the user */\r\n            setMsgModal('ReCAPTCHA verification failed');/* if the response is not ok, alert the user */\r\n            handleShow();\r\n            return;\r\n        }\r\n\r\n        /* define the signUp request message */\r\n        const requestMsg = {\r\n            method: 'POST',\r\n            headers: { 'Content-Type': 'application/json' },\r\n            body: JSON.stringify(\r\n                {\r\n                    title:     'SignUp',\r\n                    email:     data.email,\r\n                    firstName: data.firstName,\r\n                    lastName:  data.lastName,\r\n                    password:  md5(data.password)\r\n                })\r\n        };\r\n\r\n        console.log(\"requesting\");\r\n\r\n        const response = await fetch('/signUp', requestMsg) /* send the data to the server to register the user */\r\n        console.log(response);\r\n        if (!response.ok) {\r\n            setMsgModal('Invalid Registration Details');/* if the response is not ok, alert the user */\r\n            handleShow();\r\n            return;\r\n        }\r\n        const responseData = await response.json(); /* get the response data */\r\n        console.log(responseData);\r\n        /* alert the user that the registration was successful */\r\n        setMsgModal('Registered! Please login.');\r\n        handleShow();\r\n    };\r\n    \r\n    return (\r\n        <div className=\"container p-3\">\r\n\r\n            <div className=\"card o-hidden border-0 shadow-lg my-5\">\r\n                <div className=\"card-body p-0\">\r\n                    <div className=\"row\">\r\n                        <div className=\"col-lg-5 d-none d-lg-block bg-register-image\"></div>\r\n                        <div className=\"col-lg-7\">\r\n                            <div className=\"p-2\">\r\n                                <div className=\"text-center\">\r\n                                    <h1 className=\"h4 text-gray-900 mb-4\">Create an Account!</h1>\r\n                                </div>\r\n                                <form className=\"user\" onSubmit={handleSubmit(submitForm)}>\r\n                                    <div className=\"form-group row\">\r\n                                        <div className=\"col-sm-6\">\r\n                                            <input type=\"text\" className=\"form-control form-control-user\" name=\"firstName\"\r\n                                                placeholder=\"First Name\" {...register('firstName')}/>\r\n                                            {errors.firstName ? <p className='error-msg'>{errors.firstName?.message}</p> : <br/>} {/* display error message if the first name is not valid */}\r\n                                        </div>\r\n                                        <div className=\"col-sm-6\">\r\n                                            <input type=\"text\" className=\"form-control form-control-user\" name=\"lastName\"\r\n                                                placeholder=\"Last Name\" {...register('lastName')}/>\r\n                                            {errors.lastName ? <p className='error-msg'>{errors.lastName?.message}</p> : <p className='space'>{'.'}</p>} {/* display error message if the last name is not valid */}\r\n                                        </div>\r\n                                    </div>\r\n                                    <div className=\"form-group\">\r\n                                        <input type=\"email\" className=\"form-control form-control-user\" name=\"email\"\r\n                                            placeholder=\"Email Address\" {...register('email')}/>\r\n                                        {errors.email ? <p className='error-msg'>{errors.email?.message}</p> : <br/>} {/* display error message if the email is not valid */}\r\n                                    </div>\r\n                                    <div className=\"form-group row\">\r\n                                        <div className=\"col-sm-6\">\r\n                                            <input type=\"password\" className=\"form-control form-control-user\"\r\n                                                name=\"password\" placeholder=\"Password\" {...register('password')}/>\r\n                                            {errors.password ? <p className='error-msg'>{errors.password?.message}</p> : <br/>} {/* display error message if the password is not valid */}\r\n                                        </div>\r\n                                        <div className=\"col-sm-6\">\r\n                                            <input type=\"password\" className=\"form-control form-control-user\"\r\n                                                name=\"repeatPassword\" placeholder=\"Repeat Password\" {...register('repeatPassword')}/>\r\n                                            {errors.repeatPassword ? <p className='error-msg'>{errors.repeatPassword?.message}</p> : <p className='space2'>{'.'}</p>} {/* display error message if the repeat password is not valid */}\r\n                                        </div>\r\n                                    </div>\r\n                                    <center className='margin-bottom-ReCAPTCHA'><ReCAPTCHA /* display the reCAPTCHA */\r\n                                        sitekey={process.env.REACT_APP_RECAPTCHA_SITE_KEY}\r\n                                        ref={captchaRef}\r\n                                    /></center>\r\n                                    <input type=\"submit\" className=\"btn btn-primary btn-user btn-block\" value={'Register Account'}></input> \r\n                                </form>\r\n                                <hr/>\r\n                                <div className=\"text-center\">\r\n                                    <a className=\"small cursor-pointer\" onClick={handleClickLogIn}>Already have an account? Login!</a>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <Modal show={showModal} onHide={handleClose}>\r\n                <Modal.Header closeButton>\r\n                    <Modal.Title className='msg-modal-title'>ALERT!</Modal.Title>\r\n                </Modal.Header>\r\n                <Modal.Body><p className='msg-modal'>{msgModal}</p></Modal.Body>\r\n                <Modal.Footer>\r\n                    <Button variant=\"secondary\" onClick={handleClose}>\r\n                        Close\r\n                    </Button>\r\n                    \r\n                </Modal.Footer>\r\n            </Modal>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default SignUp;","C:\\Users\\moran\\Documents\\GitHub\\Final-task-client-server-course-car-service-info\\client\\src\\components\\ResetPassword\\ResetPassword.jsx",["93"],[],"import React,{useState} from 'react';\r\nimport md5 from 'md5';\r\nimport {resetPasswordSchema } from 'Validations/FormsValidation';\r\nimport { yupResolver } from '@hookform/resolvers/yup';\r\nimport { useForm } from 'react-hook-form';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport { Modal, Button } from \"react-bootstrap\";\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport './ResetPassword.css';\r\n\r\n/* ResetPassword Component */\r\nconst ResetPassword = () => {\r\n\r\n    const navigate = useNavigate(); /* define hook to navigate to other pages */\r\n    const [showModal, setShow] = useState(false);/*define state for the modal box */\r\n    const [msgModal, setMsgModal] = useState('');/*define state for the message modal box */\r\n\r\n    /* function that close the modal and reset the message modal*/\r\n    const handleClose = () =>{\r\n        setShow(false);\r\n        setMsgModal('');\r\n   }\r\n   /* function that open the modal and displays it*/\r\n   const handleShow = () =>{\r\n       setShow(true);\r\n   }\r\n\r\n    /* function that navigates to the log in page */\r\n    const handleClickLogIn = () => {\r\n        navigate('/logIn');\r\n    };\r\n\r\n    /* function that navigates to the home page */\r\n    const handleClickHome = () => {\r\n        navigate('/');\r\n    };\r\n\r\n    /* define useForm for the resetPassword form */\r\n    const { register, handleSubmit, formState: { errors }} = useForm({\r\n        resolver: yupResolver(resetPasswordSchema), /* validate the form with the schema */\r\n        mode: \"onChange\" /* validate the form on change */\r\n    });\r\n\r\n    /* function that submit the form and send the data to the server*/\r\n    const submitForm = async (data) => {\r\n\r\n        /* define the request message */\r\n        const requestMsg = {\r\n            method: 'POST',\r\n            headers: { 'Content-Type': 'application/json' },\r\n            body: JSON.stringify(\r\n                {\r\n                    title:       'ResetPassword',\r\n                    email:        data.email,\r\n                    password:     md5(data.password)\r\n                })\r\n        };\r\n        console.log(\"requesting\");\r\n\r\n        const response = await fetch('/resetPassword', requestMsg) /* send the data to the server */\r\n        console.log(response);\r\n        if (!response.ok) { /* if the response is not ok, alert the user */\r\n            setMsgModal('Invalid Details.');\r\n            handleShow();\r\n            return;\r\n        }\r\n        const responseData = await response.json(); /* retrieve the response data */\r\n        console.log(responseData);\r\n        setMsgModal('Updated.');/* alert the user */\r\n        handleShow();\r\n        handleClickLogIn(); /* navigate to the log in page */\r\n    };\r\n\r\n    return (\r\n        <div className=\"container p-3\">\r\n\r\n            <div className=\"row justify-content-center\">\r\n                <div className=\"col-xl-10 col-lg-12 col-md-9\">\r\n                    <div className=\"card o-hidden border-0 shadow-lg my-5\">\r\n                        <div className=\"card-body p-0\">\r\n                            <div className=\"row\">\r\n                                <div className=\"col-lg-6 d-none d-lg-block bg-reset-password-image\"></div>\r\n                                <div className=\"col-lg-6\">\r\n                                    <div className=\"p-5\">\r\n                                        <div className=\"text-center\">\r\n                                            <h1 className=\"h4 text-gray-900 mb-4\">Reset Password!</h1>\r\n                                        </div>\r\n                                        <form className=\"user\" onSubmit={handleSubmit(submitForm)}>\r\n                                            <div className=\"form-group\">\r\n                                                <input type=\"email\" className=\"form-control form-control-user\"\r\n                                                    name=\"email\" aria-describedby=\"emailHelp\"\r\n                                                    placeholder=\"Enter Email Address...\" {...register('email')}/>\r\n                                                {errors.email ? <p className='error-msg'>{errors.email?.message}</p> : <p className='space2'>{'.'}</p>} {/* display error message if the email is not valid */}\r\n                                                <input type=\"password\" className=\"form-control form-control-user\"\r\n                                                    name=\"password\" placeholder=\"Password\" {...register('password')}/>\r\n                                                {errors.password ? <p className='error-msg'>{errors.password?.message}</p> : <p className='space2'>{'.'}</p>} {/* display error message if the password is not valid */}\r\n                                                <input type=\"password\" className=\"form-control form-control-user\"\r\n                                                    name=\"repeatPassword\" placeholder=\"Repeat Password\" {...register('repeatPassword')}/>\r\n                                                {errors.repeatPassword ? <p className='error-msg'>{errors.repeatPassword?.message}</p> : <p className='space2'>{'.'}</p>} {/* display error message if the repeat password is not valid */}\r\n                                            </div>\r\n                                            <input type=\"submit\" className=\"btn btn-primary btn-user btn-block\" value={'Reset Password'}></input>\r\n                                        </form>\r\n                                        <hr/>\r\n                                        <div className=\"text-center\">\r\n                                            <a className=\"small cursor-pointer\" onClick={handleClickHome}>Disscare</a>\r\n                                        </div>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n\r\n                </div>\r\n\r\n            </div>\r\n            <Modal show={showModal} onHide={handleClose}>\r\n                <Modal.Header closeButton>\r\n                    <Modal.Title className='msg-modal-title'>ALERT!</Modal.Title>\r\n                </Modal.Header>\r\n                <Modal.Body><p className='msg-modal'>{msgModal}</p></Modal.Body>\r\n                <Modal.Footer>\r\n                    <Button variant=\"secondary\" onClick={handleClose}>\r\n                        Close\r\n                    </Button>\r\n                    \r\n                </Modal.Footer>\r\n            </Modal>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ResetPassword;","C:\\Users\\moran\\Documents\\GitHub\\Final-task-client-server-course-car-service-info\\client\\src\\components\\Page404\\Page404.jsx",[],[],"C:\\Users\\moran\\Documents\\GitHub\\Final-task-client-server-course-car-service-info\\client\\src\\components\\AddNewCarService\\AddNewCarService.jsx",[],[],"C:\\Users\\moran\\Documents\\GitHub\\Final-task-client-server-course-car-service-info\\client\\src\\components\\ForgotPassword\\ForgotPassword.jsx",["94","95"],[],"import React,{useState} from 'react';\r\nimport { forgotPasswordSchema } from 'Validations/FormsValidation';\r\nimport { yupResolver } from '@hookform/resolvers/yup';\r\nimport { useForm } from 'react-hook-form';\r\nimport { useNavigate  } from 'react-router-dom';\r\nimport { Modal, Button } from \"react-bootstrap\";\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport './ForgotPassword.css';\r\n\r\n/* Forgot Password Component */\r\nconst ForgotPassword = () => {\r\n\r\n    const navigate = useNavigate(); /* define hook to navigate to other pages */\r\n    const [showModal, setShow] = useState(false);/*define state for the modal box */\r\n    const [msgModal, setMsgModal] = useState('');/*define state for the message modal box */\r\n\r\n    /* function that navigate to the signUp page */\r\n    const handleClickSignUp = () => {\r\n        navigate('/signUp');\r\n    };\r\n\r\n    /* function that close the modal and reset the message modal*/\r\n    const handleClose = () =>{\r\n        setShow(false);\r\n        if(msgModal === 'Sent! Check your mail.') {\r\n            setMsgModal('');\r\n            handleClickHome();\r\n        }\r\n        setMsgModal('');\r\n   }\r\n   /* function that open the modal and displays it*/\r\n   const handleShow = () =>{\r\n       setShow(true);\r\n   }\r\n\r\n    /* function that navigate to the logIn page */\r\n    const handleClickLogIn = () => {\r\n        navigate('/logIn');\r\n    };\r\n\r\n    /* function that navigate to the home page */\r\n    const handleClickHome = () => {\r\n        navigate('/');\r\n    };\r\n\r\n    /* define useForm for the forgotPassword form */\r\n    const { register, handleSubmit, formState: { errors }} = useForm({\r\n        resolver: yupResolver(forgotPasswordSchema), /* validate the form with the schema */\r\n        mode: \"onChange\" /* validate the form on change */\r\n    });\r\n\r\n    /* function that submit the form and send the data to the server */\r\n    const submitForm = async (data) => {\r\n        \r\n        /* define the request message */\r\n        const requestMsg = {\r\n            method: 'POST',\r\n            headers: { 'Content-Type': 'application/json' },\r\n            body: JSON.stringify(\r\n                {\r\n                    title:     'ForgotPassword',\r\n                    email:     data.email\r\n                })\r\n        };\r\n        console.log(\"requesting\");\r\n\r\n        /* send the request to the server */\r\n        const response = await fetch('/forgotPassword', requestMsg)\r\n        console.log(response);\r\n        if (!response.ok) { /* if the response is not ok, alert the user */\r\n            setMsgModal('Invalid Details');/* if the response is not ok, alert the user */\r\n            handleShow();\r\n            return;\r\n        }\r\n        /* if the response is ok, alert the user */\r\n        const responseData = await response.json();\r\n        console.log(responseData);\r\n        setMsgModal('Sent! Check your mail.');/* if the response is not ok, alert the user */\r\n        handleShow();\r\n    };\r\n\r\n    return (\r\n        <div className=\"container p-3\">\r\n\r\n            <div className=\"row justify-content-center\">\r\n                <div className=\"col-xl-10 col-lg-12 col-md-9\">\r\n                    <div className=\"card o-hidden border-0 shadow-lg my-5\">\r\n                        <div className=\"card-body p-0\">\r\n                            <div className=\"row\">\r\n                                <div className=\"col-lg-6 d-none d-lg-block bg-forgot-password-image\"></div>\r\n                                <div className=\"col-lg-6\">\r\n                                    <div className=\"p-5\">\r\n                                        <div className=\"text-center\">\r\n                                            <h1 className=\"h4 text-gray-900 mb-2\">Forgot Your Password?</h1>\r\n                                            <p className=\"mb-4 forgot-password-data-label\">We get it, stuff happens. Just enter your email address below\r\n                                                and we'll send you a link to reset your password!</p>\r\n                                        </div>\r\n                                        <form className=\"user\" onSubmit={handleSubmit(submitForm)}>\r\n                                            <div className=\"form-group\">\r\n                                                <input type=\"email\" className=\"form-control form-control-user\"\r\n                                                    name=\"email\" aria-describedby=\"emailHelp\"\r\n                                                    placeholder=\"Enter Email Address...\" {...register('email')}/>\r\n                                                    {errors.email ? <p className='error-msg'>{errors.email?.message}</p> : <br/>} {/* display error message if the email is not valid */}\r\n                                            </div>\r\n                                            <input type=\"submit\" className=\"btn btn-primary btn-user btn-block\" value={'Reset Password'}></input> {/* submit button */}\r\n                                        </form>\r\n                                        <hr/>\r\n                                        <div className=\"text-center\">\r\n                                            <a className=\"small cursor-pointer\" onClick={handleClickSignUp}>Create an Account!</a>\r\n                                        </div>\r\n                                        <div className=\"text-center\">\r\n                                            <a className=\"small cursor-pointer\" onClick={handleClickLogIn}>Already have an account? Login!</a>\r\n                                        </div>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n\r\n                </div>\r\n\r\n            </div>\r\n            <Modal show={showModal} onHide={handleClose}>\r\n                <Modal.Header closeButton>\r\n                    <Modal.Title className='msg-modal-title'>ALERT!</Modal.Title>\r\n                </Modal.Header>\r\n                <Modal.Body><p className='msg-modal'>{msgModal}</p></Modal.Body>\r\n                <Modal.Footer>\r\n                    <Button variant=\"secondary\" onClick={handleClose}>\r\n                        Close\r\n                    </Button>\r\n                    \r\n                </Modal.Footer>\r\n            </Modal>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ForgotPassword;","C:\\Users\\moran\\Documents\\GitHub\\Final-task-client-server-course-car-service-info\\client\\src\\components\\AboutUs\\AboutUs.jsx",[],[],"C:\\Users\\moran\\Documents\\GitHub\\Final-task-client-server-course-car-service-info\\client\\src\\components\\Dashboard\\Dashboard.jsx",["96","97","98","99","100","101","102"],[],"import React, { useMemo, useEffect, useState } from 'react';\r\nimport { useNavigate  } from 'react-router-dom';\r\nimport ReactTable from '../ReactTable/ReactTable';\r\nimport imageProfile from '../../images/profile-icon.png';\r\nimport imageEdit from '../../images/edit-car-image.png';\r\nimport imageDelete from '../../images/delete-car-image.png';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport './Dashboard.css';\r\n\r\n/* Dashboard Component */\r\nconst Dashboard = () => {\r\n    \r\n    const navigate = useNavigate(); /* define hook to navigate to other pages */\r\n    const [carsTableData, setCarsTableData] = useState([]); /* define state to save the cars data */\r\n\r\n    const storedUser = localStorage.getItem('user');\r\n    if(!storedUser) { \r\n        navigate('*'); /* if the user is not exists in local storage, navigate to the 404 page */\r\n    }\r\n    const user = JSON.parse(storedUser); /* else get the user data from local storage */\r\n\r\n    useEffect(() => {\r\n        // Check for a stored session in local storage\r\n        const storedConnected = localStorage.getItem('connected');\r\n        if (!storedConnected) {\r\n            navigate('*'); /* if the user is not logged in, navigate to the 404 page */\r\n        }\r\n        \r\n        /* else get the cars data from the server */\r\n        async function fetchData() {\r\n            const response = await fetch('/getCarsData'); /* send request to the server */\r\n            const json = await response.json(); /* get the response from the server */\r\n            setCarsTableData(json); /* save the cars data in the carsTableData state */\r\n            console.log(json);\r\n        }\r\n        fetchData();\r\n\r\n    }, []); // Only run this effect once\r\n\r\n    /* function that navigate to the addNewCarService page when click on edit specific car service*/\r\n    const onClickEdit = (row) => {\r\n        console.log('Edit button clicked for car with treatment number: ', row.original.treatmentNumber);\r\n        localStorage.setItem('carService', JSON.stringify(row.original)); /* save the car service data that choose to edit in local storage */\r\n        navigate('/editCarService'); /* navigate to the editCarService page */\r\n    }\r\n\r\n    /* function that delete the specific car service when click on delete specific car service*/\r\n    const onClickDelete = async (row) => {\r\n        console.log('Delete button clicked for car with treatment number: ', row.original.treatmentNumber);\r\n        \r\n        /* send request to the server to delete the specific car service */\r\n        await fetch('/deleteCar', {\r\n            method: 'POST',\r\n            headers: {'Content-Type': 'application/json'},\r\n            body: JSON.stringify({\r\n                treatmentNumber:   row.original.treatmentNumber,\r\n            })\r\n        })\r\n       window.location.reload(false) /* reload the page after delete car service*/\r\n    }\r\n\r\n    /* function that navigate to the addNewCarService page when click on add new car service*/\r\n    const handleClickAddNewCarService = () => {\r\n        navigate('/addNewCarService');\r\n    };\r\n\r\n    /* function that implement log out- remove the coonected, user, session from the local storage and move to the home page */\r\n    const handleOnClickLogOut = () => {\r\n        localStorage.removeItem('connected');\r\n        localStorage.removeItem('user');\r\n        localStorage.removeItem('session');\r\n        navigate('/');\r\n    }\r\n\r\n    /* define the columns of the cars service table */\r\n    const tableColumns = useMemo(\r\n        () => [\r\n            {\r\n                Header: 'Treatment Number',\r\n                accessor: 'treatmentNumber',\r\n            },\r\n            {\r\n                Header: 'Treatment Information',\r\n                accessor: 'treatmentInfo',\r\n            },\r\n            {\r\n                Header: 'Date',\r\n                accessor: 'dateT',\r\n                Cell: ({ cell: { row } }) => { /* define the date format */\r\n                    const date = new Date(row.original.dateT);\r\n                    const day = date.getDate();\r\n                    const month = date.getMonth() + 1;\r\n                    const year = date.getFullYear();\r\n                    const hours = date.getHours();\r\n                    const minutes = date.getMinutes();\r\n                    const dateStr = `${day}/${month}/${year} ${hours}:${minutes}`;\r\n                    return dateStr;\r\n                }\r\n            },\r\n            {\r\n                Header: 'Worker Email',\r\n                accessor: 'workerEmail',\r\n            },\r\n            {\r\n                Header: 'Car Number',\r\n                accessor: 'carNumber',\r\n            },\r\n            {\r\n                Header: 'Action',\r\n                accessor: 'action',\r\n                Cell: row => (\r\n                    <div>\r\n                        <button onClick={() => onClickEdit(row.row)} className='button-image'> {/* define the edit button */}\r\n                            <img src={imageEdit} alt=\"image-button\" style={{ width: '30px', height: '30px' }}/>\r\n                        </button>\r\n                        <button onClick={(e) => onClickDelete(row.row)} className='button-image'> {/* define the delete button */}\r\n                            <img src={imageDelete} alt=\"image-button\" style={{ width: '30px', height: '30px' }}/>\r\n                        </button>\r\n                    </div>     \r\n                )\r\n            }\r\n        ],\r\n        [],\r\n    );\r\n\r\n    return (\r\n        <div className='container'>\r\n            <div id=\"page-top\">\r\n\r\n                {/* Page Wrapper */}\r\n                <div id=\"wrapper\">\r\n\r\n                    {/* Content Wrapper */}\r\n                    <div id=\"content-wrapper\" className=\"d-flex flex-column\">\r\n\r\n                        {/* Main Content */}\r\n                        <div id=\"content\">\r\n\r\n                            {/* Topbar */}\r\n                            <nav className=\"navbar navbar-expand navbar-light bg-white topbar mb-4 static-top shadow\">\r\n                                \r\n                                <a href=\"#\" className=\"nav-link link-log-out\" onClick={handleOnClickLogOut}>Log Out</a>\r\n                                {/* Topbar Navbar */}\r\n                                <ul className=\"navbar-nav ml-auto\">\r\n                                    \r\n\r\n                                    <div className=\"topbar-divider d-none d-sm-block\"></div>\r\n\r\n                                    {/* Nav Item - User Information */}\r\n                                    <li className=\"nav-item dropdown no-arrow\">\r\n                                        <a className=\"nav-link dropdown-toggle\" href=\"#\" id=\"userDropdown\" role=\"button\"\r\n                                            data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\">\r\n                                            <span className=\"mr-2 d-none d-lg-inline text-gray-600 big\">{`${user?.firstName} ${user?.lastName}`}</span>\r\n                                            <img className=\"img-profile rounded-circle\" src={imageProfile} style={{ width: '45px', height: '40px' }}/>\r\n                                        </a>\r\n                                    </li>\r\n                                </ul>\r\n                            </nav>\r\n                            {/* End of Topbar */}\r\n\r\n                            {/* Begin Page Content */}\r\n                            <div className=\"container-fluid\">\r\n\r\n                                {/* Page Heading */}\r\n                                <h1 className=\"h3 mb-2 text-gray-800\">Car Service Table</h1>\r\n                                <button className=\"mb-4 btn btn-primary\" onClick={handleClickAddNewCarService}>Add New Car Service</button>\r\n\r\n                                <div className=\"card shadow mb-4\">\r\n                                    <div className=\"card-body\">\r\n                                        <div className=\"table-responsive\">\r\n                                            <table className=\"table table-bordered\" id=\"dataTable\" width=\"100%\" cellspacing=\"0\">\r\n                                                <ReactTable columns={tableColumns} data={carsTableData} />\r\n                                            </table>\r\n                                        </div>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                            {/* /.container-fluid */}\r\n                        </div>\r\n                        {/* End of Main Content */}\r\n\r\n                    </div>\r\n                    {/* End of Content Wrapper */}\r\n\r\n                </div>\r\n                {/* End of Page Wrapper */}\r\n\r\n                {/* Scroll to Top Button*/}\r\n                <a className=\"scroll-to-top rounded\" href=\"#page-top\">\r\n                    <i className=\"fas fa-angle-up\"></i>\r\n                </a>\r\n        </div>\r\n    </div>\r\n    );\r\n};\r\n\r\nexport default Dashboard;","C:\\Users\\moran\\Documents\\GitHub\\Final-task-client-server-course-car-service-info\\client\\src\\components\\EditCarService\\EditCarService.jsx",[],[],"C:\\Users\\moran\\Documents\\GitHub\\Final-task-client-server-course-car-service-info\\client\\src\\components\\ReactTable\\ReactTable.jsx",["103"],[],"import { GlobalFilter } from 'components/ReactTable/GlobalFilter';\r\nimport React, { useEffect } from 'react';\r\nimport { useGlobalFilter, useSortBy, useTable, usePagination } from 'react-table';\r\nimport './ReactTable.css';\r\n\r\n/* ReactTable Component */\r\nconst ReactTable = ({\r\n    columns,\r\n    data = [],\r\n    placeholder = <></>,\r\n    onTableRowClick = () => {},\r\n    onTableDoubleClick = () => {},\r\n    getTableRowCSS = () => '',\r\n    filterString = ''\r\n}) => {\r\n\r\n    // Hooks\r\n    const { getTableProps,\r\n            getTableBodyProps,\r\n            headerGroups,\r\n            page,\r\n            nextPage,\r\n            previousPage,\r\n            canNextPage,\r\n            canPreviousPage, \r\n            pageOptions,\r\n            prepareRow,\r\n            state, \r\n            setGlobalFilter } =\r\n        useTable({ columns, data, initialState: { pageSize: 5 } }, useGlobalFilter, useSortBy, usePagination);\r\n\r\n    const { globalFilter } = state;\r\n    const { pageIndex } = state;\r\n    \r\n    // Listen for input changes outside\r\n    useEffect(() => {\r\n        setGlobalFilter(filterString);\r\n    }, [filterString, data]);\r\n\r\n    return (\r\n        <div className=\"table-container\">\r\n        {data.length === 0 ? (\r\n            placeholder\r\n        ) : (\r\n            <div className='table-filter-container'>\r\n                <GlobalFilter filter={globalFilter} setFilter={setGlobalFilter} />\r\n                <table {...getTableProps()}>\r\n                <thead>\r\n                    {headerGroups.map((headerGroup) => (\r\n                    <tr {...headerGroup.getHeaderGroupProps()}>\r\n                        {headerGroup.headers.map((column) => (\r\n                        <th {...column.getHeaderProps(column.getSortByToggleProps())}>\r\n                            {column.render('Header')}\r\n                            <span> {column.isSorted ? (column.isSortedDesc ? '🔼' : '🔽') : ''}</span>{' '}\r\n                        </th>\r\n                        ))}\r\n                    </tr>\r\n                    ))}\r\n                </thead>\r\n                <tbody {...getTableBodyProps()}>\r\n                    {page.map((row) => {\r\n                    prepareRow(row);\r\n                    return (\r\n                        <tr\r\n                        {...row.getRowProps()}\r\n                        className={getTableRowCSS(row)}\r\n                        onClick={() => onTableRowClick(row)}\r\n                        onDoubleClick={() => onTableDoubleClick(row)}\r\n                        >\r\n                        {row.cells.map((cell) => {\r\n                            return <td {...cell.getCellProps()}>{cell.render('Cell')}</td>;\r\n                        })}\r\n                        </tr>\r\n                    );\r\n                    })}\r\n                </tbody>\r\n                </table>\r\n                <div className='paging-data-container'>\r\n                    <div className='total-number-of-records'>\r\n                        Showing {pageIndex * 5 + 1} to {pageIndex * 5 + page.length} of {data.length}{' '} records\r\n                    </div>\r\n                    <div className='paging-data-buttons'>\r\n                        <span>\r\n                            page{' '}\r\n                            <strong>\r\n                                {pageIndex + 1} of {pageOptions.length}\r\n                            </strong>{' '}\r\n                        </span>\r\n                        <button onClick={() => previousPage()} disabled={!canPreviousPage}>\r\n                            Previous\r\n                        </button>\r\n                        <button onClick={() => nextPage()} disabled={!canNextPage}>\r\n                            Next\r\n                        </button>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ReactTable;\r\n","C:\\Users\\moran\\Documents\\GitHub\\Final-task-client-server-course-car-service-info\\client\\src\\Validations\\FormsValidation.js",["104","105","106","107","108","109","110","111","112","113","114","115","116","117","118","119","120","121","122","123","124","125","126","127","128","129","130","131","132","133"],[],"import * as yup from 'yup'; /* yup is a JavaScript schema builder for value parsing and validation */\r\n\r\n/* Regular expression for letters only */\r\nconst lettersRegExp = /^[a-zA-Z]+$/;\r\n\r\n/* Check if the value contains only letters */\r\nconst checkIfOnlyLetters = (value) => {\r\n    return lettersRegExp.test(value);\r\n};\r\n\r\n/* yup schema for sign up form */\r\nexport const signUpSchema = yup.object().shape({\r\n    firstName: yup.string().required('First name is required').test('is-letters-only', 'First name can only contain letters', checkIfOnlyLetters),\r\n    lastName: yup.string().required('Last name is required').test('is-letters-only', 'Last name can only contain letters', checkIfOnlyLetters),\r\n    email: yup.string().email('Invalid email').required('Email is required'),\r\n    password: yup.string().min(6, 'Password must be at least 6 chars').matches(/[A-Z]/, 'Must include an uppercase character')  \r\n        .matches(/[a-z]/, 'Must include a lowercase character').matches(/\\d/, 'Must include a number')\r\n        .matches(/[!@#\\$%\\^&\\*\\(\\)\\-_\\=\\+\\\\\\|\\[\\]\\{\\};':\\\"\\/<>,\\.\\?`~]+/, 'Must include a special character')\r\n        .required('Password is required'),\r\n    repeatPassword: yup.string().oneOf([yup.ref('password'), null], 'Passwords must match').required('Confirm password is required')\r\n});\r\n\r\n/* yup schema for log in form */\r\nexport const logInSchema = yup.object().shape({\r\n    email: yup.string().email('Invalid email').required('Email is required'),\r\n    password: yup.string().min(6, 'Password must be at least 6 chars').matches(/[A-Z]/, 'Must include an uppercase character')\r\n        .matches(/[a-z]/, 'Must include a lowercase character').matches(/\\d/, 'Must include a number')\r\n        .matches(/[!@#\\$%\\^&\\*\\(\\)\\-_\\=\\+\\\\\\|\\[\\]\\{\\};':\\\"\\/<>,\\.\\?`~]+/, 'Must include a special character')\r\n        .required('Password is required'),\r\n});\r\n\r\n/* yup schema for forgot password form */\r\nexport const forgotPasswordSchema = yup.object().shape({\r\n    email: yup.string().email('Invalid email').required('Email is required'),\r\n});\r\n\r\n/* yup schema for reset password form */\r\nexport const resetPasswordSchema = yup.object().shape({\r\n    email: yup.string().email('Invalid email').required('Email is required'),\r\n    password: yup.string().min(6, 'Password must be at least 6 chars').required('Password is required'),\r\n    repeatPassword: yup.string().oneOf([yup.ref('password'), null], 'Passwords must match').required('Confirm password is required')\r\n});\r\n\r\n/* yup schema for add new car form */\r\nexport const addNewcarServiceSchema = yup.object().shape({\r\n    treatmentNumber: yup.number().integer('Must be an integer number').positive('Must be a positive number').required('Treatment number is required').typeError(\"Must be a number\"),\r\n    treatmentInformation: yup.string().required('Treatment information is required'),\r\n    workerEmail: yup.string().email('Invalid email').required('Worker email is required'),\r\n    carNumber: yup.number().integer('Must be an integer number').positive('Must be a positive number').required('Car number is required').typeError(\"Must be a number\"),\r\n});\r\n\r\n/* yup schema for edit car form */\r\nexport const editcarServiceSchema = yup.object().shape({\r\n    treatmentInformation: yup.string().required('Treatment information is required'),\r\n    workerEmail: yup.string().email('Invalid email').required('Worker email is required'),\r\n    carNumber: yup.number().integer('Must be an integer number').positive('Must be a positive number').required('Car number is required').typeError(\"Must be a number\"),\r\n});","C:\\Users\\moran\\Documents\\GitHub\\Final-task-client-server-course-car-service-info\\client\\src\\components\\ReactTable\\GlobalFilter.js",[],[],{"ruleId":"134","severity":1,"message":"135","line":32,"column":10,"nodeType":"136","endLine":32,"endColumn":12,"suggestions":"137"},{"ruleId":"138","severity":1,"message":"139","line":187,"column":45,"nodeType":"140","endLine":187,"endColumn":117},{"ruleId":"138","severity":1,"message":"139","line":190,"column":45,"nodeType":"140","endLine":190,"endColumn":109},{"ruleId":"138","severity":1,"message":"139","line":155,"column":37,"nodeType":"140","endLine":155,"endColumn":100},{"ruleId":"138","severity":1,"message":"139","line":105,"column":45,"nodeType":"140","endLine":105,"endColumn":107},{"ruleId":"138","severity":1,"message":"139","line":109,"column":45,"nodeType":"140","endLine":109,"endColumn":109},{"ruleId":"138","severity":1,"message":"139","line":112,"column":45,"nodeType":"140","endLine":112,"endColumn":108},{"ruleId":"134","severity":1,"message":"135","line":38,"column":8,"nodeType":"136","endLine":38,"endColumn":10,"suggestions":"141"},{"ruleId":"142","severity":1,"message":"143","line":114,"column":29,"nodeType":"140","endLine":114,"endColumn":112},{"ruleId":"142","severity":1,"message":"143","line":117,"column":29,"nodeType":"140","endLine":117,"endColumn":114},{"ruleId":"134","severity":1,"message":"144","line":123,"column":9,"nodeType":"136","endLine":123,"endColumn":11,"suggestions":"145"},{"ruleId":"138","severity":1,"message":"146","line":142,"column":33,"nodeType":"140","endLine":142,"endColumn":109},{"ruleId":"138","severity":1,"message":"146","line":151,"column":41,"nodeType":"140","endLine":152,"endColumn":111},{"ruleId":"147","severity":1,"message":"148","line":154,"column":45,"nodeType":"140","endLine":154,"endColumn":151},{"ruleId":"134","severity":1,"message":"149","line":38,"column":8,"nodeType":"136","endLine":38,"endColumn":28,"suggestions":"150"},{"ruleId":"151","severity":1,"message":"152","line":18,"column":23,"nodeType":"153","messageId":"154","endLine":18,"endColumn":24,"suggestions":"155"},{"ruleId":"151","severity":1,"message":"156","line":18,"column":26,"nodeType":"153","messageId":"154","endLine":18,"endColumn":27,"suggestions":"157"},{"ruleId":"151","severity":1,"message":"158","line":18,"column":29,"nodeType":"153","messageId":"154","endLine":18,"endColumn":30,"suggestions":"159"},{"ruleId":"151","severity":1,"message":"160","line":18,"column":31,"nodeType":"153","messageId":"154","endLine":18,"endColumn":32,"suggestions":"161"},{"ruleId":"151","severity":1,"message":"162","line":18,"column":33,"nodeType":"153","messageId":"154","endLine":18,"endColumn":34,"suggestions":"163"},{"ruleId":"151","severity":1,"message":"164","line":18,"column":38,"nodeType":"153","messageId":"154","endLine":18,"endColumn":39,"suggestions":"165"},{"ruleId":"151","severity":1,"message":"166","line":18,"column":40,"nodeType":"153","messageId":"154","endLine":18,"endColumn":41,"suggestions":"167"},{"ruleId":"151","severity":1,"message":"168","line":18,"column":44,"nodeType":"153","messageId":"154","endLine":18,"endColumn":45,"suggestions":"169"},{"ruleId":"151","severity":1,"message":"170","line":18,"column":46,"nodeType":"153","messageId":"154","endLine":18,"endColumn":47,"suggestions":"171"},{"ruleId":"151","severity":1,"message":"172","line":18,"column":50,"nodeType":"153","messageId":"154","endLine":18,"endColumn":51,"suggestions":"173"},{"ruleId":"151","severity":1,"message":"174","line":18,"column":52,"nodeType":"153","messageId":"154","endLine":18,"endColumn":53,"suggestions":"175"},{"ruleId":"151","severity":1,"message":"176","line":18,"column":57,"nodeType":"153","messageId":"154","endLine":18,"endColumn":58,"suggestions":"177"},{"ruleId":"151","severity":1,"message":"178","line":18,"column":59,"nodeType":"153","messageId":"154","endLine":18,"endColumn":60,"suggestions":"179"},{"ruleId":"151","severity":1,"message":"180","line":18,"column":64,"nodeType":"153","messageId":"154","endLine":18,"endColumn":65,"suggestions":"181"},{"ruleId":"151","severity":1,"message":"182","line":18,"column":66,"nodeType":"153","messageId":"154","endLine":18,"endColumn":67,"suggestions":"183"},{"ruleId":"151","severity":1,"message":"152","line":28,"column":23,"nodeType":"153","messageId":"154","endLine":28,"endColumn":24,"suggestions":"184"},{"ruleId":"151","severity":1,"message":"156","line":28,"column":26,"nodeType":"153","messageId":"154","endLine":28,"endColumn":27,"suggestions":"185"},{"ruleId":"151","severity":1,"message":"158","line":28,"column":29,"nodeType":"153","messageId":"154","endLine":28,"endColumn":30,"suggestions":"186"},{"ruleId":"151","severity":1,"message":"160","line":28,"column":31,"nodeType":"153","messageId":"154","endLine":28,"endColumn":32,"suggestions":"187"},{"ruleId":"151","severity":1,"message":"162","line":28,"column":33,"nodeType":"153","messageId":"154","endLine":28,"endColumn":34,"suggestions":"188"},{"ruleId":"151","severity":1,"message":"164","line":28,"column":38,"nodeType":"153","messageId":"154","endLine":28,"endColumn":39,"suggestions":"189"},{"ruleId":"151","severity":1,"message":"166","line":28,"column":40,"nodeType":"153","messageId":"154","endLine":28,"endColumn":41,"suggestions":"190"},{"ruleId":"151","severity":1,"message":"168","line":28,"column":44,"nodeType":"153","messageId":"154","endLine":28,"endColumn":45,"suggestions":"191"},{"ruleId":"151","severity":1,"message":"170","line":28,"column":46,"nodeType":"153","messageId":"154","endLine":28,"endColumn":47,"suggestions":"192"},{"ruleId":"151","severity":1,"message":"172","line":28,"column":50,"nodeType":"153","messageId":"154","endLine":28,"endColumn":51,"suggestions":"193"},{"ruleId":"151","severity":1,"message":"174","line":28,"column":52,"nodeType":"153","messageId":"154","endLine":28,"endColumn":53,"suggestions":"194"},{"ruleId":"151","severity":1,"message":"176","line":28,"column":57,"nodeType":"153","messageId":"154","endLine":28,"endColumn":58,"suggestions":"195"},{"ruleId":"151","severity":1,"message":"178","line":28,"column":59,"nodeType":"153","messageId":"154","endLine":28,"endColumn":60,"suggestions":"196"},{"ruleId":"151","severity":1,"message":"180","line":28,"column":64,"nodeType":"153","messageId":"154","endLine":28,"endColumn":65,"suggestions":"197"},{"ruleId":"151","severity":1,"message":"182","line":28,"column":66,"nodeType":"153","messageId":"154","endLine":28,"endColumn":67,"suggestions":"198"},"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'navigate'. Either include it or remove the dependency array.","ArrayExpression",["199"],"jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/blob/HEAD/docs/rules/anchor-is-valid.md","JSXOpeningElement",["200"],"jsx-a11y/img-redundant-alt","Redundant alt attribute. Screen-readers already announce `img` tags as an image. You don’t need to use the words `image`, `photo,` or `picture` (or any specified custom words) in the alt prop.","React Hook useMemo has a missing dependency: 'onClickEdit'. Either include it or remove the dependency array.",["201"],"The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/blob/HEAD/docs/rules/anchor-is-valid.md","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","React Hook useEffect has a missing dependency: 'setGlobalFilter'. Either include it or remove the dependency array.",["202"],"no-useless-escape","Unnecessary escape character: \\$.","Literal","unnecessaryEscape",["203","204"],"Unnecessary escape character: \\^.",["205","206"],"Unnecessary escape character: \\*.",["207","208"],"Unnecessary escape character: \\(.",["209","210"],"Unnecessary escape character: \\).",["211","212"],"Unnecessary escape character: \\=.",["213","214"],"Unnecessary escape character: \\+.",["215","216"],"Unnecessary escape character: \\|.",["217","218"],"Unnecessary escape character: \\[.",["219","220"],"Unnecessary escape character: \\{.",["221","222"],"Unnecessary escape character: \\}.",["223","224"],"Unnecessary escape character: \\\".",["225","226"],"Unnecessary escape character: \\/.",["227","228"],"Unnecessary escape character: \\..",["229","230"],"Unnecessary escape character: \\?.",["231","232"],["233","234"],["235","236"],["237","238"],["239","240"],["241","242"],["243","244"],["245","246"],["247","248"],["249","250"],["251","252"],["253","254"],["255","256"],["257","258"],["259","260"],["261","262"],{"desc":"263","fix":"264"},{"desc":"263","fix":"265"},{"desc":"266","fix":"267"},{"desc":"268","fix":"269"},{"messageId":"270","fix":"271","desc":"272"},{"messageId":"273","fix":"274","desc":"275"},{"messageId":"270","fix":"276","desc":"272"},{"messageId":"273","fix":"277","desc":"275"},{"messageId":"270","fix":"278","desc":"272"},{"messageId":"273","fix":"279","desc":"275"},{"messageId":"270","fix":"280","desc":"272"},{"messageId":"273","fix":"281","desc":"275"},{"messageId":"270","fix":"282","desc":"272"},{"messageId":"273","fix":"283","desc":"275"},{"messageId":"270","fix":"284","desc":"272"},{"messageId":"273","fix":"285","desc":"275"},{"messageId":"270","fix":"286","desc":"272"},{"messageId":"273","fix":"287","desc":"275"},{"messageId":"270","fix":"288","desc":"272"},{"messageId":"273","fix":"289","desc":"275"},{"messageId":"270","fix":"290","desc":"272"},{"messageId":"273","fix":"291","desc":"275"},{"messageId":"270","fix":"292","desc":"272"},{"messageId":"273","fix":"293","desc":"275"},{"messageId":"270","fix":"294","desc":"272"},{"messageId":"273","fix":"295","desc":"275"},{"messageId":"270","fix":"296","desc":"272"},{"messageId":"273","fix":"297","desc":"275"},{"messageId":"270","fix":"298","desc":"272"},{"messageId":"273","fix":"299","desc":"275"},{"messageId":"270","fix":"300","desc":"272"},{"messageId":"273","fix":"301","desc":"275"},{"messageId":"270","fix":"302","desc":"272"},{"messageId":"273","fix":"303","desc":"275"},{"messageId":"270","fix":"304","desc":"272"},{"messageId":"273","fix":"305","desc":"275"},{"messageId":"270","fix":"306","desc":"272"},{"messageId":"273","fix":"307","desc":"275"},{"messageId":"270","fix":"308","desc":"272"},{"messageId":"273","fix":"309","desc":"275"},{"messageId":"270","fix":"310","desc":"272"},{"messageId":"273","fix":"311","desc":"275"},{"messageId":"270","fix":"312","desc":"272"},{"messageId":"273","fix":"313","desc":"275"},{"messageId":"270","fix":"314","desc":"272"},{"messageId":"273","fix":"315","desc":"275"},{"messageId":"270","fix":"316","desc":"272"},{"messageId":"273","fix":"317","desc":"275"},{"messageId":"270","fix":"318","desc":"272"},{"messageId":"273","fix":"319","desc":"275"},{"messageId":"270","fix":"320","desc":"272"},{"messageId":"273","fix":"321","desc":"275"},{"messageId":"270","fix":"322","desc":"272"},{"messageId":"273","fix":"323","desc":"275"},{"messageId":"270","fix":"324","desc":"272"},{"messageId":"273","fix":"325","desc":"275"},{"messageId":"270","fix":"326","desc":"272"},{"messageId":"273","fix":"327","desc":"275"},{"messageId":"270","fix":"328","desc":"272"},{"messageId":"273","fix":"329","desc":"275"},{"messageId":"270","fix":"330","desc":"272"},{"messageId":"273","fix":"331","desc":"275"},{"messageId":"270","fix":"332","desc":"272"},{"messageId":"273","fix":"333","desc":"275"},"Update the dependencies array to be: [navigate]",{"range":"334","text":"335"},{"range":"336","text":"335"},"Update the dependencies array to be: [onClickEdit]",{"range":"337","text":"338"},"Update the dependencies array to be: [filterString, data, setGlobalFilter]",{"range":"339","text":"340"},"removeEscape",{"range":"341","text":"342"},"Remove the `\\`. This maintains the current functionality.","escapeBackslash",{"range":"343","text":"344"},"Replace the `\\` with `\\\\` to include the actual backslash character.",{"range":"345","text":"342"},{"range":"346","text":"344"},{"range":"347","text":"342"},{"range":"348","text":"344"},{"range":"349","text":"342"},{"range":"350","text":"344"},{"range":"351","text":"342"},{"range":"352","text":"344"},{"range":"353","text":"342"},{"range":"354","text":"344"},{"range":"355","text":"342"},{"range":"356","text":"344"},{"range":"357","text":"342"},{"range":"358","text":"344"},{"range":"359","text":"342"},{"range":"360","text":"344"},{"range":"361","text":"342"},{"range":"362","text":"344"},{"range":"363","text":"342"},{"range":"364","text":"344"},{"range":"365","text":"342"},{"range":"366","text":"344"},{"range":"367","text":"342"},{"range":"368","text":"344"},{"range":"369","text":"342"},{"range":"370","text":"344"},{"range":"371","text":"342"},{"range":"372","text":"344"},{"range":"373","text":"342"},{"range":"374","text":"344"},{"range":"375","text":"342"},{"range":"376","text":"344"},{"range":"377","text":"342"},{"range":"378","text":"344"},{"range":"379","text":"342"},{"range":"380","text":"344"},{"range":"381","text":"342"},{"range":"382","text":"344"},{"range":"383","text":"342"},{"range":"384","text":"344"},{"range":"385","text":"342"},{"range":"386","text":"344"},{"range":"387","text":"342"},{"range":"388","text":"344"},{"range":"389","text":"342"},{"range":"390","text":"344"},{"range":"391","text":"342"},{"range":"392","text":"344"},{"range":"393","text":"342"},{"range":"394","text":"344"},{"range":"395","text":"342"},{"range":"396","text":"344"},{"range":"397","text":"342"},{"range":"398","text":"344"},{"range":"399","text":"342"},{"range":"400","text":"344"},{"range":"401","text":"342"},{"range":"402","text":"344"},[1421,1423],"[navigate]",[1667,1669],[5418,5420],"[onClickEdit]",[1101,1121],"[filterString, data, setGlobalFilter]",[1035,1036],"",[1035,1035],"\\",[1038,1039],[1038,1038],[1041,1042],[1041,1041],[1043,1044],[1043,1043],[1045,1046],[1045,1045],[1050,1051],[1050,1050],[1052,1053],[1052,1052],[1056,1057],[1056,1056],[1058,1059],[1058,1058],[1062,1063],[1062,1062],[1064,1065],[1064,1064],[1069,1070],[1069,1069],[1071,1072],[1071,1071],[1076,1077],[1076,1076],[1078,1079],[1078,1078],[1725,1726],[1725,1725],[1728,1729],[1728,1728],[1731,1732],[1731,1731],[1733,1734],[1733,1733],[1735,1736],[1735,1735],[1740,1741],[1740,1740],[1742,1743],[1742,1742],[1746,1747],[1746,1746],[1748,1749],[1748,1748],[1752,1753],[1752,1752],[1754,1755],[1754,1754],[1759,1760],[1759,1759],[1761,1762],[1761,1761],[1766,1767],[1766,1766],[1768,1769],[1768,1768]]