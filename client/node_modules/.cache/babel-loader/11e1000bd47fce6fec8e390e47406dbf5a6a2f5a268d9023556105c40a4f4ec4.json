{"ast":null,"code":"import*as yup from'yup';/* yup is a JavaScript schema builder for value parsing and validation */ /* Regular expression for letters only */var lettersRegExp=/^[a-zA-Z]+$/;/* Check if the value contains only letters */var checkIfOnlyLetters=function checkIfOnlyLetters(value){return lettersRegExp.test(value);};/* yup schema for sign up form */export var signUpSchema=yup.object().shape({firstName:yup.string().required('First name is required').test('is-letters-only','First name can only contain letters',checkIfOnlyLetters),lastName:yup.string().required('Last name is required').test('is-letters-only','Last name can only contain letters',checkIfOnlyLetters),email:yup.string().email('Invalid email').required('Email is required'),password:yup.string().min(6,'Password must be at least 6 chars').matches(/[A-Z]/,'Must include an uppercase character').matches(/[a-z]/,'Must include a lowercase character').matches(/\\d/,'Must include a number').matches(/[!@#\\$%\\^&\\*\\(\\)\\-_\\=\\+\\\\\\|\\[\\]\\{\\};':\\\"\\/<>,\\.\\?`~]+/,'Must include a special character').required('Password is required'),repeatPassword:yup.string().oneOf([yup.ref('password'),null],'Passwords must match').required('Confirm password is required')});/* yup schema for log in form */export var logInSchema=yup.object().shape({email:yup.string().email('Invalid email').required('Email is required'),password:yup.string().min(6,'Password must be at least 6 chars').matches(/[A-Z]/,'Must include an uppercase character').matches(/[a-z]/,'Must include a lowercase character').matches(/\\d/,'Must include a number').matches(/[!@#\\$%\\^&\\*\\(\\)\\-_\\=\\+\\\\\\|\\[\\]\\{\\};':\\\"\\/<>,\\.\\?`~]+/,'Must include a special character').required('Password is required')});/* yup schema for forgot password form */export var forgotPasswordSchema=yup.object().shape({email:yup.string().email('Invalid email').required('Email is required')});/* yup schema for reset password form */export var resetPasswordSchema=yup.object().shape({email:yup.string().email('Invalid email').required('Email is required'),password:yup.string().min(6,'Password must be at least 6 chars').required('Password is required'),repeatPassword:yup.string().oneOf([yup.ref('password'),null],'Passwords must match').required('Confirm password is required')});/* yup schema for add new car form */export var addNewcarServiceSchema=yup.object().shape({treatmentNumber:yup.number().integer('Must be an integer number').positive('Must be a positive number').required('Treatment number is required').typeError(\"Must be a number\"),treatmentInformation:yup.string().required('Treatment information is required'),workerEmail:yup.string().email('Invalid email').required('Worker email is required'),carNumber:yup.number().integer('Must be an integer number').positive('Must be a positive number').required('Car number is required').typeError(\"Must be a number\")});/* yup schema for edit car form */export var editcarServiceSchema=yup.object().shape({treatmentInformation:yup.string().required('Treatment information is required'),workerEmail:yup.string().email('Invalid email').required('Worker email is required'),carNumber:yup.number().integer('Must be an integer number').positive('Must be a positive number').required('Car number is required').typeError(\"Must be a number\")});","map":{"version":3,"names":["yup","lettersRegExp","checkIfOnlyLetters","value","test","signUpSchema","object","shape","firstName","string","required","lastName","email","password","min","matches","repeatPassword","oneOf","ref","logInSchema","forgotPasswordSchema","resetPasswordSchema","addNewcarServiceSchema","treatmentNumber","number","integer","positive","typeError","treatmentInformation","workerEmail","carNumber","editcarServiceSchema"],"sources":["C:/Users/moran/Documents/GitHub/Final-task-client-server-course-car-service-info/frontent/src/Validations/FormsValidation.js"],"sourcesContent":["import * as yup from 'yup'; /* yup is a JavaScript schema builder for value parsing and validation */\r\n\r\n/* Regular expression for letters only */\r\nconst lettersRegExp = /^[a-zA-Z]+$/;\r\n\r\n/* Check if the value contains only letters */\r\nconst checkIfOnlyLetters = (value) => {\r\n    return lettersRegExp.test(value);\r\n};\r\n\r\n/* yup schema for sign up form */\r\nexport const signUpSchema = yup.object().shape({\r\n    firstName: yup.string().required('First name is required').test('is-letters-only', 'First name can only contain letters', checkIfOnlyLetters),\r\n    lastName: yup.string().required('Last name is required').test('is-letters-only', 'Last name can only contain letters', checkIfOnlyLetters),\r\n    email: yup.string().email('Invalid email').required('Email is required'),\r\n    password: yup.string().min(6, 'Password must be at least 6 chars').matches(/[A-Z]/, 'Must include an uppercase character')  \r\n        .matches(/[a-z]/, 'Must include a lowercase character').matches(/\\d/, 'Must include a number')\r\n        .matches(/[!@#\\$%\\^&\\*\\(\\)\\-_\\=\\+\\\\\\|\\[\\]\\{\\};':\\\"\\/<>,\\.\\?`~]+/, 'Must include a special character')\r\n        .required('Password is required'),\r\n    repeatPassword: yup.string().oneOf([yup.ref('password'), null], 'Passwords must match').required('Confirm password is required')\r\n});\r\n\r\n/* yup schema for log in form */\r\nexport const logInSchema = yup.object().shape({\r\n    email: yup.string().email('Invalid email').required('Email is required'),\r\n    password: yup.string().min(6, 'Password must be at least 6 chars').matches(/[A-Z]/, 'Must include an uppercase character')\r\n        .matches(/[a-z]/, 'Must include a lowercase character').matches(/\\d/, 'Must include a number')\r\n        .matches(/[!@#\\$%\\^&\\*\\(\\)\\-_\\=\\+\\\\\\|\\[\\]\\{\\};':\\\"\\/<>,\\.\\?`~]+/, 'Must include a special character')\r\n        .required('Password is required'),\r\n});\r\n\r\n/* yup schema for forgot password form */\r\nexport const forgotPasswordSchema = yup.object().shape({\r\n    email: yup.string().email('Invalid email').required('Email is required'),\r\n});\r\n\r\n/* yup schema for reset password form */\r\nexport const resetPasswordSchema = yup.object().shape({\r\n    email: yup.string().email('Invalid email').required('Email is required'),\r\n    password: yup.string().min(6, 'Password must be at least 6 chars').required('Password is required'),\r\n    repeatPassword: yup.string().oneOf([yup.ref('password'), null], 'Passwords must match').required('Confirm password is required')\r\n});\r\n\r\n/* yup schema for add new car form */\r\nexport const addNewcarServiceSchema = yup.object().shape({\r\n    treatmentNumber: yup.number().integer('Must be an integer number').positive('Must be a positive number').required('Treatment number is required').typeError(\"Must be a number\"),\r\n    treatmentInformation: yup.string().required('Treatment information is required'),\r\n    workerEmail: yup.string().email('Invalid email').required('Worker email is required'),\r\n    carNumber: yup.number().integer('Must be an integer number').positive('Must be a positive number').required('Car number is required').typeError(\"Must be a number\"),\r\n});\r\n\r\n/* yup schema for edit car form */\r\nexport const editcarServiceSchema = yup.object().shape({\r\n    treatmentInformation: yup.string().required('Treatment information is required'),\r\n    workerEmail: yup.string().email('Invalid email').required('Worker email is required'),\r\n    carNumber: yup.number().integer('Must be an integer number').positive('Must be a positive number').required('Car number is required').typeError(\"Must be a number\"),\r\n});"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}